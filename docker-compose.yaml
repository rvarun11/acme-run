version: "3.8"

services:
# RabbitMQ
  # rabbitmq:
  #   container_name: rabbitmq
  #   image: rabbitmq:management
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   healthcheck:
  #     test: rabbitmq-diagnostics check_port_connectivity
  #     interval: 5s
  #     timeout: 5s
  #     retries: 3

# User Manager
  user:
    container_name: user
    build: ./user
    restart: always
    ports:
     - "8010:8010"
    environment:
      - MODE=prod
      - PORT=8010
      - GIN_MODE=release
      - POSTGRES_HOST=user-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_ENCODING=UTF8
      - POSTGRES_LOG_LEVEL=silent
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - user-network

  user-db:
    container_name: user-db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_ENCODING=UTF8
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - user-network


# Zone Manager
  # zone:
  #   container_name: zone
  #   build: ./zone
  #   restart: always
  #   ports:
  #    - "8011:8011"
  #   environment:
  #     - MODE=prod
  #     - PORT=8011
  #     - GIN_MODE=release
  #     - POSTGRES_HOST=zone-db
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_DB=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_ENCODING=UTF8
  #     - POSTGRES_LOG_LEVEL=silent
  #     - RABBITMQ_HOSTNAME=rabbitmq
  #     - RABBITMQ_PORT=5672
  #     - RABBITMQ_USER=guest
  #     - RABBITMQ_PASSWORD=guest
  #   depends_on:
  #     zone-db:
  #       condition: service_healthy
  #     # xxxx: # TODO: add correct dep
  #     #   condition: service_started
  #     # rabbitmq:
  #     #   condition: service_healthy
  #   networks:
  #     - zone-network

  # zone-db:
  #   container_name: trail-db
  #   image: postgres:latest
  #   restart: always
  #   environment:
  #     - POSTGRES_DB=postgres
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_ENCODING=UTF8
  #   healthcheck:
  #     test: pg_isready -U postgres
  #     interval: 5s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - zone-network

# Peripheral Service
  # peripheral:
  #   container_name: peripheral
  #   build: ./peripheral
  #   restart: always
  #   ports:
  #    - "8012:8012"
  #   environment:
  #     - MODE=prod
  #     - PORT=8012
  #     - GIN_MODE=release
  #     # - POSTGRES_HOST=peripheral-db # TODO: Remove if no db is present
  #     # - POSTGRES_PORT=5432
  #     # - POSTGRES_DB=postgres
  #     # - POSTGRES_USER=postgres
  #     # - POSTGRES_PASSWORD=postgres
  #     # - POSTGRES_ENCODING=UTF8
  #     # - POSTGRES_LOG_LEVEL=silent
  #     - RABBITMQ_HOSTNAME=rabbitmq
  #     - RABBITMQ_PORT=5672
  #     - RABBITMQ_USER=guest
  #     - RABBITMQ_PASSWORD=guest
  #   depends_on:
  #     # rabbitmq:
  #     #   condition: service_healthy
  #     # xxxx:
  #     #   condition: service_started
  #   networks:
  #     - peripheral-network


# Workout Manager
  # workout:
  #   container_name: workout
  #   build: ./workout
  #   restart: always
  #   ports:
  #    - "8013:8013"
  #   environment:
  #     - MODE=prod
  #     - PORT=8013
  #     - GIN_MODE=release
  #     - POSTGRES_HOST=workout-db
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_DB=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_ENCODING=UTF8
  #     - POSTGRES_LOG_LEVEL=silent
  #     - RABBITMQ_HOSTNAME=rabbitmq
  #     - RABBITMQ_PORT=5672
  #     - RABBITMQ_USER=guest
  #     - RABBITMQ_PASSWORD=guest
  #   depends_on:
  #     workout-db:
  #       condition: service_healthy
  #     # rabbitmq:
  #     #   condition: service_healthy
  #     # peripheral:
  #     #   condition: service_started
  #     # trail:
  #     #   condition: service_started
  #     # challenge:
  #     #   condition: service_started
  #   networks:
  #     - workout-network

  # workout-db:
  #   container_name: workout-db
  #   image: postgres:latest
  #   restart: always
  #   environment:
  #     - POSTGRES_DB=postgres
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_ENCODING=UTF8
  #   healthcheck:
  #     test: pg_isready -U postgres
  #     interval: 5s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - workout-network

# Challenge Manager
  # challenge:
  #   container_name: challenge
  #   build: ./challenge
  #   restart: always
  #   ports:
  #    - "8014:8014"
  #   environment:
  #     - MODE=prod
  #     - PORT=8014
  #     - GIN_MODE=release
  #     - POSTGRES_HOST=challenge-db
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_DB=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_ENCODING=UTF8
  #     - POSTGRES_LOG_LEVEL=silent
  #     - RABBITMQ_HOSTNAME=rabbitmq
  #     - RABBITMQ_PORT=5672
  #     - RABBITMQ_USER=guest
  #     - RABBITMQ_PASSWORD=guest
  #   depends_on:
  #     challenge-db:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   networks:
  #     - challenge-network

  # challenge-db:
  #   container_name: challenge-db
  #   image: postgres:latest
  #   restart: always
  #   environment:
  #     - POSTGRES_DB=postgres
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_ENCODING=UTF8
  #   healthcheck:
  #     test: pg_isready -U postgres
  #     interval: 5s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - challenge-network


# Networks for the different services
networks:
  user-network:
    driver: bridge
  zone-network:
    driver: bridge
  peripheral-network:
    driver: bridge
  workout-network:
    driver: bridge
  challenge-network:
    driver: bridge
