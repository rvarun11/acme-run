// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Varun Rajput",
            "url": "https://github.com/rvarun11",
            "email": "rajpuv2@mcmaster.ca"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/challenges": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "list challenges",
                "operationId": "list-challenges",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "put": {
                "produces": [
                    "application/json"
                ],
                "summary": "update challenge",
                "operationId": "update-challenge",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "post": {
                "produces": [
                    "application/json"
                ],
                "summary": "create a challenge",
                "operationId": "create-challenge",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.challengeDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/v1/challenges/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "get challenge",
                "operationId": "get-challenge",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        }
    },
    "definitions": {
        "http.challengeDTO": {
            "type": "object",
            "properties": {
                "badge_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "criteria": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "end": {
                    "type": "string"
                },
                "goal": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Challenge Manager API",
	Description:      "This provides a description of API endpoints for the Challenge Manager",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
